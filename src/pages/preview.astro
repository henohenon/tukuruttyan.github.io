---
import '../styles/global.css'
import GameCard from '../components/GameCard.astro'
---

<html lang="ja">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>GameCard プレビュー | 作るっちゃん</title>
</head>
<body class="bg-gray-50 text-gray-900">
<!-- Header -->
<header class="bg-white shadow-sm sticky top-0 z-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-4">
            <!-- Logo -->
            <div class="flex items-center">
                <img src="/logo.png" alt="作るっちゃん" class="h-10 w-auto" />
            </div>

            <!-- Navigation -->
            <nav class="flex space-x-8">
                <a href="/" class="text-gray-700 hover:text-gray-900 font-medium transition-colors">ホーム</a>
                <a href="/preview" class="text-blue-600 hover:text-blue-800 font-medium transition-colors">プレビュー</a>
            </nav>
        </div>
    </div>
</header>

<main class="py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold mb-4">GameCard プレビュー</h1>
            <p class="text-lg text-gray-600">任意の情報を入力してGameCardのプレビューを確認できます</p>
        </div>

        <div class="grid grid-cols-1 gap-8">
            <!-- Input Form -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold mb-6">入力フォーム</h2>

                <div class="space-y-4">
                    <div>
                        <label for="thumbnail" class="block text-sm font-medium text-gray-700 mb-2">サムネイル URL</label>
                        <input
                                type="url"
                                id="thumbnail"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="https://example.com/image.jpg"
                        />
                        <p class="text-xs text-gray-500 mt-1">画像のURLを入力してください</p>
                    </div>

                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-2">タイトル</label>
                        <input
                                type="text"
                                id="title"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="プロジェクトタイトルを入力"
                                value="サンプルプロジェクト"
                        />
                    </div>

                    <div>
                        <label for="team" class="block text-sm font-medium text-gray-700 mb-2">チーム</label>
                        <input
                                type="text"
                                id="team"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="チーム名を入力"
                                value="サンプルチーム"
                        />
                        <p class="text-xs text-gray-500 mt-1">チーム名やメンバー名などを記入して下さい。入力した文字列がそのまま表示されます</p>
                    </div>

                    <div>
                        <label for="link" class="block text-sm font-medium text-gray-700 mb-2">リンク</label>
                        <input
                                type="url"
                                id="link"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="https://example.com/project"
                        />
                        <p class="text-xs text-gray-500 mt-1">サムネとタイトルにリンクが貼られます。空欄の場合はリンクなしで表示されます。1つのみ対応です。もし複数貼りたい場合は、詳細の方に記載して下さい</p>
                    </div>

                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700 mb-2">詳細</label>
                        <textarea
                                id="description"
                                rows="4"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                                placeholder="プロジェクトの詳細を入力"
                        >このプロジェクトはサンプルの説明文です。ここに詳細な内容を記載することができます。</textarea>
                        <p class="text-xs text-gray-500 mt-1">なんちゃってmarkdown対応、太字, 斜体, リンクに対応しています</p>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">掲載日</label>
                        <p class="w-full px-3 py-2 border border-gray-200 rounded-md bg-gray-50 text-sm text-gray-600">
                            フォームに入力した年月日となります
                        </p>
                    </div>
                </div>
            </div>

            <!-- Preview Section -->
            <div class="space-y-6">
                <!-- PC Preview -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                        PC プレビュー
                    </h2>
                    <div id="pc-preview" class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                        <!-- GameCard will be inserted here by JavaScript -->
                    </div>
                </div>

                <!-- Mobile Preview -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-xl font-semibold mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a1 1 0 001-1V4a1 1 0 00-1-1H8a1 1 0 00-1 1v16a1 1 0 001 1z"></path>
                        </svg>
                        モバイル プレビュー
                    </h2>
                    <div class="max-w-sm mx-auto">
                        <div id="mobile-preview" class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                            <!-- GameCard will be inserted here by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Footer -->
<footer class="bg-gray-900 text-white py-8 mt-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <p>&copy; 2025 作るっちゃん</p>
        </div>
    </div>
</footer>

<script>
  // Get form elements
  const thumbnailInput = document.getElementById('thumbnail');
  const titleInput = document.getElementById('title');
  const teamInput = document.getElementById('team');
  const linkInput = document.getElementById('link');
  const descriptionInput = document.getElementById('description');

  // Get preview containers
  const pcPreview = document.getElementById('pc-preview');
  const mobilePreview = document.getElementById('mobile-preview');

  // Simple markdown parser function
  function parseMarkdown(text) {
    if (!text) return '';
    
    return text
      // Bold with **text** or __text__
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/__(.*?)__/g, '<strong>$1</strong>')
      // Italic with *text* or _text_ (but not inside bold)
      .replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>')
      .replace(/(?<!_)_([^_]+?)_(?!_)/g, '<em>$1</em>')
      // Links with [text](url)
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:text-blue-600 underline">$1</a>')
      // Line breaks (double line breaks become paragraphs)
      .replace(/\n\n/g, '</p><p>')
      // Single line breaks become <br>
      .replace(/\n/g, '<br>');
  }

  // Function to create GameCard HTML
  function createGameCardHTML(data, isMobile = false) {
    const hasLink = data.link && data.link.trim() !== '';
    const thumbnailContent = data.thumbnail && data.thumbnail.trim() !== ''
      ? `<img src="${data.thumbnail}" alt="サムネイル" class="w-full h-full object-cover rounded-lg" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
					   <div class="w-full h-full bg-gray-200 flex items-center justify-center rounded-lg" style="display:none;">
						   <span class="text-lg text-gray-400">サムネイル</span>
					   </div>`
      : `<div class="w-full h-full bg-gray-200 flex items-center justify-center rounded-lg">
						   <span class="text-lg text-gray-400">サムネイル</span>
					   </div>`;

    return `
					<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow relative">
						<div class="flex ${isMobile ? 'flex-col' : 'flex-col sm:flex-row'}">
							<!-- Thumbnail -->
							<div class="p-4 flex-shrink-0">
								${hasLink ? `<a href="${data.link}" target="_blank" rel="noopener noreferrer" class="block">` : ''}
									<div class="w-full aspect-video ${isMobile ? '' : 'sm:w-96 sm:h-54'} ${hasLink ? 'hover:bg-gray-300 transition-colors cursor-pointer' : ''} rounded-lg overflow-hidden">
										${thumbnailContent}
									</div>
								${hasLink ? '</a>' : ''}
							</div>
							<!-- Content -->
							<div class="flex-1 p-4 sm:p-6 pb-12 sm:pb-8">
								${hasLink ? `<a href="${data.link}" target="_blank" rel="noopener noreferrer" class="no-underline">` : ''}
									<h3 class="text-lg sm:text-xl font-semibold mb-2 ${hasLink ? 'text-blue-400 hover:text-blue-600 hover:underline cursor-pointer transition-colors' : 'text-gray-900'}">${data.title}</h3>
								${hasLink ? '</a>' : ''}
								<p class="text-sm text-gray-500 mb-2">${data.team}</p>
								<div class="text-sm text-gray-600 leading-relaxed">
									<p>${parseMarkdown(data.description)}</p>
								</div>
							</div>
						</div>
						<!-- Publication date positioned at bottom-right -->
						<p class="text-xs text-gray-300 absolute bottom-2 right-4">掲載日: ${data.publishedDate}</p>
					</div>
				`;
  }

  // Function to update previews
  function updatePreviews() {
    const data = {
      thumbnail: thumbnailInput.value,
      title: titleInput.value || 'タイトル未設定',
      team: teamInput.value || 'チーム名未設定',
      link: linkInput.value,
      description: descriptionInput.value || '詳細未設定',
      publishedDate: '2025年9月6日'
    };

    // Update PC preview
    pcPreview.innerHTML = createGameCardHTML(data, false);

    // Update Mobile preview
    mobilePreview.innerHTML = createGameCardHTML(data, true);
  }

  // Function to read URL parameters and populate form fields
  function populateFromURLParams() {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Map URL parameters to form fields
    const paramMap = {
      'thumbnail': thumbnailInput,
      'title': titleInput,
      'team': teamInput,
      'link': linkInput,
      'description': descriptionInput
    };
    
    // Set values from URL parameters if they exist
    Object.keys(paramMap).forEach(paramName => {
      const paramValue = urlParams.get(paramName);
      if (paramValue !== null && paramValue.trim() !== '') {
        paramMap[paramName].value = decodeURIComponent(paramValue);
      }
    });
  }

  // Add event listeners to all inputs
  [thumbnailInput, titleInput, teamInput, linkInput, descriptionInput].forEach(input => {
    input.addEventListener('input', updatePreviews);
  });

  // Populate form fields from URL parameters if available
  populateFromURLParams();
  
  // Initial preview update
  updatePreviews();
</script>
</body>
</html>